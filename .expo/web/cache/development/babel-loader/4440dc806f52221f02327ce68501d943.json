{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport interpolateNode from \"../reanimated1/derived/interpolate\";\nexport var Extrapolation;\n\n(function (Extrapolation) {\n  Extrapolation[\"IDENTITY\"] = \"identity\";\n  Extrapolation[\"CLAMP\"] = \"clamp\";\n  Extrapolation[\"EXTEND\"] = \"extend\";\n})(Extrapolation || (Extrapolation = {}));\n\nfunction isNode(x) {\n  'worklet';\n\n  return x.__nodeId !== undefined;\n}\n\nfunction getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n\n      return rightEdgeOutput;\n\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  var extrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n        interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n    }\n\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n    throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n      interpolate(value, [inputRange], [outputRange], {\\n        extrapolateLeft: Extrapolation.CLAMP,\\n        extrapolateRight: Extrapolation.IDENTITY\\n      }})\");\n  }\n\n  _extends(extrapolationConfig, type);\n\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(x, narrowedInput, extrapolationConfig) {\n  'worklet';\n\n  var leftEdgeInput = narrowedInput.leftEdgeInput,\n      rightEdgeInput = narrowedInput.rightEdgeInput,\n      leftEdgeOutput = narrowedInput.leftEdgeOutput,\n      rightEdgeOutput = narrowedInput.rightEdgeOutput;\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n  var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n\n  if (input.length < 2 || output.length < 2) {\n    throw Error('Interpolation input and output should contain at least two values.');\n  }\n\n  var extrapolationConfig = validateType(type);\n\n  if (isNode(x)) {\n    console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n    return interpolateNode(x, {\n      inputRange: input,\n      outputRange: output,\n      extrapolateLeft: extrapolationConfig.extrapolateLeft,\n      extrapolateRight: extrapolationConfig.extrapolateRight\n    });\n  }\n\n  var length = input.length;\n  var narrowedInput = {\n    leftEdgeInput: input[0],\n    rightEdgeInput: input[1],\n    leftEdgeOutput: output[0],\n    rightEdgeOutput: output[1]\n  };\n\n  if (length > 2) {\n    if (x > input[length - 1]) {\n      narrowedInput.leftEdgeInput = input[length - 2];\n      narrowedInput.rightEdgeInput = input[length - 1];\n      narrowedInput.leftEdgeOutput = output[length - 2];\n      narrowedInput.rightEdgeOutput = output[length - 1];\n    } else {\n      for (var i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput.leftEdgeInput = input[i - 1];\n          narrowedInput.rightEdgeInput = input[i];\n          narrowedInput.leftEdgeOutput = output[i - 1];\n          narrowedInput.rightEdgeOutput = output[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}","map":{"version":3,"names":["interpolateNode","Extrapolation","isNode","x","__nodeId","undefined","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","input","output","length","console","warn","inputRange","outputRange","i"],"sources":["C:/Users/josho/Downloads/healthWetu/healthwetu/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"],"sourcesContent":["// @ts-ignore JS file\r\nimport interpolateNode from '../reanimated1/derived/interpolate';\r\nexport var Extrapolation;\r\n(function (Extrapolation) {\r\n    Extrapolation[\"IDENTITY\"] = \"identity\";\r\n    Extrapolation[\"CLAMP\"] = \"clamp\";\r\n    Extrapolation[\"EXTEND\"] = \"extend\";\r\n})(Extrapolation || (Extrapolation = {}));\r\nfunction isNode(x) {\r\n    'worklet';\r\n    return x.__nodeId !== undefined;\r\n}\r\nfunction getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\r\n    'worklet';\r\n    switch (type) {\r\n        case Extrapolation.IDENTITY:\r\n            return x;\r\n        case Extrapolation.CLAMP:\r\n            if (coef * val < coef * leftEdgeOutput) {\r\n                return leftEdgeOutput;\r\n            }\r\n            return rightEdgeOutput;\r\n        case Extrapolation.EXTEND:\r\n        default:\r\n            return val;\r\n    }\r\n}\r\nfunction isExtrapolate(value) {\r\n    'worklet';\r\n    return (value === Extrapolation.EXTEND ||\r\n        value === Extrapolation.CLAMP ||\r\n        value === Extrapolation.IDENTITY);\r\n}\r\n// validates extrapolations type\r\n// if type is correct, converts it to ExtrapolationConfig\r\nfunction validateType(type) {\r\n    'worklet';\r\n    // initialize extrapolationConfig with default extrapolation\r\n    const extrapolationConfig = {\r\n        extrapolateLeft: Extrapolation.EXTEND,\r\n        extrapolateRight: Extrapolation.EXTEND,\r\n    };\r\n    if (!type) {\r\n        return extrapolationConfig;\r\n    }\r\n    if (typeof type === 'string') {\r\n        if (!isExtrapolate(type)) {\r\n            throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\r\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\r\n        }\r\n        extrapolationConfig.extrapolateLeft = type;\r\n        extrapolationConfig.extrapolateRight = type;\r\n        return extrapolationConfig;\r\n    }\r\n    // otherwise type is extrapolation config object\r\n    if ((type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\r\n        (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))) {\r\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\r\n      interpolate(value, [inputRange], [outputRange], {\r\n        extrapolateLeft: Extrapolation.CLAMP,\r\n        extrapolateRight: Extrapolation.IDENTITY\r\n      }})`);\r\n    }\r\n    Object.assign(extrapolationConfig, type);\r\n    return extrapolationConfig;\r\n}\r\nfunction internalInterpolate(x, narrowedInput, extrapolationConfig) {\r\n    'worklet';\r\n    const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } = narrowedInput;\r\n    if (rightEdgeInput - leftEdgeInput === 0)\r\n        return leftEdgeOutput;\r\n    const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\r\n    const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\r\n    const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\r\n    if (coef * val < coef * leftEdgeOutput) {\r\n        return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\r\n    }\r\n    else if (coef * val > coef * rightEdgeOutput) {\r\n        return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\r\n    }\r\n    return val;\r\n}\r\n// TODO: support default values in worklets:\r\n// e.g. function interpolate(x, input, output, type = Extrapolatation.CLAMP)\r\nexport function interpolate(x, input, output, type) {\r\n    'worklet';\r\n    if (input.length < 2 || output.length < 2) {\r\n        throw Error('Interpolation input and output should contain at least two values.');\r\n    }\r\n    const extrapolationConfig = validateType(type);\r\n    if (isNode(x)) {\r\n        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\r\n        return interpolateNode(x, {\r\n            inputRange: input,\r\n            outputRange: output,\r\n            extrapolateLeft: extrapolationConfig.extrapolateLeft,\r\n            extrapolateRight: extrapolationConfig.extrapolateRight,\r\n        });\r\n    }\r\n    const length = input.length;\r\n    const narrowedInput = {\r\n        leftEdgeInput: input[0],\r\n        rightEdgeInput: input[1],\r\n        leftEdgeOutput: output[0],\r\n        rightEdgeOutput: output[1],\r\n    };\r\n    if (length > 2) {\r\n        if (x > input[length - 1]) {\r\n            narrowedInput.leftEdgeInput = input[length - 2];\r\n            narrowedInput.rightEdgeInput = input[length - 1];\r\n            narrowedInput.leftEdgeOutput = output[length - 2];\r\n            narrowedInput.rightEdgeOutput = output[length - 1];\r\n        }\r\n        else {\r\n            for (let i = 1; i < length; ++i) {\r\n                if (x <= input[i]) {\r\n                    narrowedInput.leftEdgeInput = input[i - 1];\r\n                    narrowedInput.rightEdgeInput = input[i];\r\n                    narrowedInput.leftEdgeOutput = output[i - 1];\r\n                    narrowedInput.rightEdgeOutput = output[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return internalInterpolate(x, narrowedInput, extrapolationConfig);\r\n}\r\n"],"mappings":";AACA,OAAOA,eAAP;AACA,OAAO,IAAIC,aAAJ;;AACP,CAAC,UAAUA,aAAV,EAAyB;EACtBA,aAAa,CAAC,UAAD,CAAb,GAA4B,UAA5B;EACAA,aAAa,CAAC,OAAD,CAAb,GAAyB,OAAzB;EACAA,aAAa,CAAC,QAAD,CAAb,GAA0B,QAA1B;AACH,CAJD,EAIGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAJhB;;AAKA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;EACf;;EACA,OAAOA,CAAC,CAACC,QAAF,KAAeC,SAAtB;AACH;;AACD,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,GAA5B,EAAiCC,cAAjC,EAAiDC,eAAjD,EAAkER,CAAlE,EAAqE;EACjE;;EACA,QAAQI,IAAR;IACI,KAAKN,aAAa,CAACW,QAAnB;MACI,OAAOT,CAAP;;IACJ,KAAKF,aAAa,CAACY,KAAnB;MACI,IAAIL,IAAI,GAAGC,GAAP,GAAaD,IAAI,GAAGE,cAAxB,EAAwC;QACpC,OAAOA,cAAP;MACH;;MACD,OAAOC,eAAP;;IACJ,KAAKV,aAAa,CAACa,MAAnB;IACA;MACI,OAAOL,GAAP;EAVR;AAYH;;AACD,SAASM,aAAT,CAAuBC,KAAvB,EAA8B;EAC1B;;EACA,OAAQA,KAAK,KAAKf,aAAa,CAACa,MAAxB,IACJE,KAAK,KAAKf,aAAa,CAACY,KADpB,IAEJG,KAAK,KAAKf,aAAa,CAACW,QAF5B;AAGH;;AAGD,SAASK,YAAT,CAAsBV,IAAtB,EAA4B;EACxB;;EAEA,IAAMW,mBAAmB,GAAG;IACxBC,eAAe,EAAElB,aAAa,CAACa,MADP;IAExBM,gBAAgB,EAAEnB,aAAa,CAACa;EAFR,CAA5B;;EAIA,IAAI,CAACP,IAAL,EAAW;IACP,OAAOW,mBAAP;EACH;;EACD,IAAI,OAAOX,IAAP,KAAgB,QAApB,EAA8B;IAC1B,IAAI,CAACQ,aAAa,CAACR,IAAD,CAAlB,EAA0B;MACtB,MAAM,IAAIc,KAAJ,+QAAN;IAEH;;IACDH,mBAAmB,CAACC,eAApB,GAAsCZ,IAAtC;IACAW,mBAAmB,CAACE,gBAApB,GAAuCb,IAAvC;IACA,OAAOW,mBAAP;EACH;;EAED,IAAKX,IAAI,CAACY,eAAL,IAAwB,CAACJ,aAAa,CAACR,IAAI,CAACY,eAAN,CAAvC,IACCZ,IAAI,CAACa,gBAAL,IAAyB,CAACL,aAAa,CAACR,IAAI,CAACa,gBAAN,CAD5C,EACsE;IAClE,MAAM,IAAIC,KAAJ,gXAAN;EAKH;;EACD,SAAcH,mBAAd,EAAmCX,IAAnC;;EACA,OAAOW,mBAAP;AACH;;AACD,SAASI,mBAAT,CAA6BnB,CAA7B,EAAgCoB,aAAhC,EAA+CL,mBAA/C,EAAoE;EAChE;;EACA,IAAQM,aAAR,GAA2ED,aAA3E,CAAQC,aAAR;EAAA,IAAuBC,cAAvB,GAA2EF,aAA3E,CAAuBE,cAAvB;EAAA,IAAuCf,cAAvC,GAA2Ea,aAA3E,CAAuCb,cAAvC;EAAA,IAAuDC,eAAvD,GAA2EY,aAA3E,CAAuDZ,eAAvD;EACA,IAAIc,cAAc,GAAGD,aAAjB,KAAmC,CAAvC,EACI,OAAOd,cAAP;EACJ,IAAMgB,QAAQ,GAAG,CAACvB,CAAC,GAAGqB,aAAL,KAAuBC,cAAc,GAAGD,aAAxC,CAAjB;EACA,IAAMf,GAAG,GAAGC,cAAc,GAAGgB,QAAQ,IAAIf,eAAe,GAAGD,cAAtB,CAArC;EACA,IAAMF,IAAI,GAAGG,eAAe,IAAID,cAAnB,GAAoC,CAApC,GAAwC,CAAC,CAAtD;;EACA,IAAIF,IAAI,GAAGC,GAAP,GAAaD,IAAI,GAAGE,cAAxB,EAAwC;IACpC,OAAOJ,MAAM,CAACY,mBAAmB,CAACC,eAArB,EAAsCX,IAAtC,EAA4CC,GAA5C,EAAiDC,cAAjD,EAAiEC,eAAjE,EAAkFR,CAAlF,CAAb;EACH,CAFD,MAGK,IAAIK,IAAI,GAAGC,GAAP,GAAaD,IAAI,GAAGG,eAAxB,EAAyC;IAC1C,OAAOL,MAAM,CAACY,mBAAmB,CAACE,gBAArB,EAAuCZ,IAAvC,EAA6CC,GAA7C,EAAkDC,cAAlD,EAAkEC,eAAlE,EAAmFR,CAAnF,CAAb;EACH;;EACD,OAAOM,GAAP;AACH;;AAGD,OAAO,SAASkB,WAAT,CAAqBxB,CAArB,EAAwByB,KAAxB,EAA+BC,MAA/B,EAAuCtB,IAAvC,EAA6C;EAChD;;EACA,IAAIqB,KAAK,CAACE,MAAN,GAAe,CAAf,IAAoBD,MAAM,CAACC,MAAP,GAAgB,CAAxC,EAA2C;IACvC,MAAMT,KAAK,CAAC,oEAAD,CAAX;EACH;;EACD,IAAMH,mBAAmB,GAAGD,YAAY,CAACV,IAAD,CAAxC;;EACA,IAAIL,MAAM,CAACC,CAAD,CAAV,EAAe;IACX4B,OAAO,CAACC,IAAR;IACA,OAAOhC,eAAe,CAACG,CAAD,EAAI;MACtB8B,UAAU,EAAEL,KADU;MAEtBM,WAAW,EAAEL,MAFS;MAGtBV,eAAe,EAAED,mBAAmB,CAACC,eAHf;MAItBC,gBAAgB,EAAEF,mBAAmB,CAACE;IAJhB,CAAJ,CAAtB;EAMH;;EACD,IAAMU,MAAM,GAAGF,KAAK,CAACE,MAArB;EACA,IAAMP,aAAa,GAAG;IAClBC,aAAa,EAAEI,KAAK,CAAC,CAAD,CADF;IAElBH,cAAc,EAAEG,KAAK,CAAC,CAAD,CAFH;IAGlBlB,cAAc,EAAEmB,MAAM,CAAC,CAAD,CAHJ;IAIlBlB,eAAe,EAAEkB,MAAM,CAAC,CAAD;EAJL,CAAtB;;EAMA,IAAIC,MAAM,GAAG,CAAb,EAAgB;IACZ,IAAI3B,CAAC,GAAGyB,KAAK,CAACE,MAAM,GAAG,CAAV,CAAb,EAA2B;MACvBP,aAAa,CAACC,aAAd,GAA8BI,KAAK,CAACE,MAAM,GAAG,CAAV,CAAnC;MACAP,aAAa,CAACE,cAAd,GAA+BG,KAAK,CAACE,MAAM,GAAG,CAAV,CAApC;MACAP,aAAa,CAACb,cAAd,GAA+BmB,MAAM,CAACC,MAAM,GAAG,CAAV,CAArC;MACAP,aAAa,CAACZ,eAAd,GAAgCkB,MAAM,CAACC,MAAM,GAAG,CAAV,CAAtC;IACH,CALD,MAMK;MACD,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4B,EAAEK,CAA9B,EAAiC;QAC7B,IAAIhC,CAAC,IAAIyB,KAAK,CAACO,CAAD,CAAd,EAAmB;UACfZ,aAAa,CAACC,aAAd,GAA8BI,KAAK,CAACO,CAAC,GAAG,CAAL,CAAnC;UACAZ,aAAa,CAACE,cAAd,GAA+BG,KAAK,CAACO,CAAD,CAApC;UACAZ,aAAa,CAACb,cAAd,GAA+BmB,MAAM,CAACM,CAAC,GAAG,CAAL,CAArC;UACAZ,aAAa,CAACZ,eAAd,GAAgCkB,MAAM,CAACM,CAAD,CAAtC;UACA;QACH;MACJ;IACJ;EACJ;;EACD,OAAOb,mBAAmB,CAACnB,CAAD,EAAIoB,aAAJ,EAAmBL,mBAAnB,CAA1B;AACH"},"metadata":{},"sourceType":"module"}