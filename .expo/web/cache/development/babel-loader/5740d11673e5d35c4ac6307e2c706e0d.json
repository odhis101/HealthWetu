{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ReanimatedModule from \"../../ReanimatedModule\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./AnimatedValue\";\nimport { createAnimatedAlways } from \"./AnimatedAlways\";\nimport invariant from 'invariant';\nimport createEventObjectProxyPolyfill from \"./createEventObjectProxyPolyfill\";\n\nfunction sanitizeArgMapping(argMapping) {\n  var eventMappings = [];\n  var alwaysNodes = [];\n\n  var getNode = function getNode(node) {\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      return node;\n    }\n\n    return node.__nodeID;\n  };\n\n  var traverse = function traverse(value, path) {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      var node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (var key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');\n  var ev = argMapping[0].nativeEvent;\n\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    var proxyHandler = {\n      get: function get(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n\n        return target[name];\n      },\n      set: function set(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n\n        return false;\n      }\n    };\n    var proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return {\n    eventMappings: eventMappings,\n    alwaysNodes: alwaysNodes\n  };\n}\n\nvar AnimatedEvent = function (_AnimatedNode) {\n  _inherits(AnimatedEvent, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedEvent);\n\n  function AnimatedEvent(argMapping) {\n    var _this;\n\n    var _config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AnimatedEvent);\n\n    var _sanitizeArgMapping = sanitizeArgMapping(argMapping),\n        eventMappings = _sanitizeArgMapping.eventMappings,\n        alwaysNodes = _sanitizeArgMapping.alwaysNodes;\n\n    _this = _super.call(this, {\n      type: 'event',\n      argMapping: eventMappings\n    });\n    _this.__isNative = true;\n    _this._alwaysNodes = alwaysNodes;\n    return _this;\n  }\n\n  _createClass(AnimatedEvent, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedEvent, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"attachEvent\",\n    value: function attachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].__attach();\n      }\n\n      this.__attach();\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return 0;\n    }\n  }, {\n    key: \"detachEvent\",\n    value: function detachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();\n      }\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n\n      this.__detach();\n    }\n  }]);\n\n  return AnimatedEvent;\n}(AnimatedNode);\n\nexport { AnimatedEvent as default };\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}","map":{"version":3,"names":["ReanimatedModule","AnimatedNode","InternalAnimatedValue","createAnimatedAlways","invariant","createEventObjectProxyPolyfill","sanitizeArgMapping","argMapping","eventMappings","alwaysNodes","getNode","node","Platform","OS","__nodeID","traverse","value","path","push","concat","__val","key","nativeEvent","ev","proxyHandler","get","target","name","Proxy","set","prop","proxy","AnimatedEvent","_config","type","__isNative","_alwaysNodes","viewRef","eventName","i","length","__attach","viewTag","findNodeHandle","attachEvent","isNativelyInitialized","__detach","detachEvent","createAnimatedEvent","config"],"sources":["C:/Users/josho/Downloads/healthWetu/healthwetu/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js"],"sourcesContent":["import { Platform, findNodeHandle } from 'react-native';\r\nimport ReanimatedModule from '../../ReanimatedModule';\r\n\r\nimport AnimatedNode from './AnimatedNode';\r\nimport InternalAnimatedValue from './AnimatedValue';\r\nimport { createAnimatedAlways } from './AnimatedAlways';\r\n\r\nimport invariant from 'invariant';\r\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\r\n\r\nfunction sanitizeArgMapping(argMapping) {\r\n  // Find animated values in `argMapping` and create an array representing their\r\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\r\n  const eventMappings = [];\r\n  const alwaysNodes = [];\r\n\r\n  const getNode = (node) => {\r\n    if (\r\n      Platform.OS === 'web' ||\r\n      Platform.OS === 'windows' ||\r\n      Platform.OS === 'macos'\r\n    ) {\r\n      return node;\r\n    }\r\n    return node.__nodeID;\r\n  };\r\n\r\n  const traverse = (value, path) => {\r\n    if (value instanceof InternalAnimatedValue) {\r\n      eventMappings.push(path.concat(getNode(value)));\r\n    } else if (typeof value === 'object' && value.__val) {\r\n      eventMappings.push(path.concat(getNode(value.__val)));\r\n    } else if (typeof value === 'function') {\r\n      const node = new InternalAnimatedValue(0);\r\n      alwaysNodes.push(createAnimatedAlways(value(node)));\r\n      eventMappings.push(path.concat(getNode(node)));\r\n    } else if (typeof value === 'object') {\r\n      for (const key in value) {\r\n        traverse(value[key], path.concat(key));\r\n      }\r\n    }\r\n  };\r\n\r\n  invariant(\r\n    argMapping[0] && argMapping[0].nativeEvent,\r\n    'Native driven events only support animated values contained inside `nativeEvent`.'\r\n  );\r\n\r\n  // Assume that the event containing `nativeEvent` is always the first argument.\r\n  const ev = argMapping[0].nativeEvent;\r\n  if (typeof ev === 'object') {\r\n    traverse(ev, []);\r\n  } else if (typeof ev === 'function') {\r\n    const proxyHandler = {\r\n      get: function (target, name) {\r\n        if (name === '__isProxy') {\r\n          return true;\r\n        }\r\n        if (!target[name] && name !== '__val') {\r\n          target[name] = new Proxy({}, proxyHandler);\r\n        }\r\n        return target[name];\r\n      },\r\n      set: function (target, prop, value) {\r\n        if (prop === '__val') {\r\n          target[prop] = value;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n    };\r\n\r\n    const proxy =\r\n      typeof Proxy === 'function'\r\n        ? new Proxy({}, proxyHandler)\r\n        : createEventObjectProxyPolyfill();\r\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\r\n    traverse(proxy, []);\r\n  }\r\n\r\n  return { eventMappings, alwaysNodes };\r\n}\r\n\r\nexport default class AnimatedEvent extends AnimatedNode {\r\n  constructor(argMapping, _config = {}) {\r\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\r\n    super({ type: 'event', argMapping: eventMappings });\r\n    this._alwaysNodes = alwaysNodes;\r\n  }\r\n\r\n  toString() {\r\n    return `AnimatedEvent, id: ${this.__nodeID}`;\r\n  }\r\n\r\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\r\n  // as Animated.event event callback and therefore filtered out from being send over the\r\n  // bridge which was causing the object to be frozen in JS.\r\n  __isNative = true;\r\n\r\n  attachEvent(viewRef, eventName) {\r\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\r\n      this._alwaysNodes[i].__attach();\r\n    }\r\n    this.__attach();\r\n    const viewTag = findNodeHandle(viewRef);\r\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\r\n  }\r\n\r\n  __onEvaluate() {\r\n    return 0;\r\n  }\r\n\r\n  detachEvent(viewRef, eventName) {\r\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\r\n      this._alwaysNodes[i].isNativelyInitialized() &&\r\n        this._alwaysNodes[i].__detach();\r\n    }\r\n    const viewTag = findNodeHandle(viewRef);\r\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\r\n    this.__detach();\r\n  }\r\n}\r\n\r\nexport function createAnimatedEvent(argMapping, config) {\r\n  return new AnimatedEvent(argMapping, config);\r\n}\r\n"],"mappings":";;;;;;;;;;;;AACA,OAAOA,gBAAP;AAEA,OAAOC,YAAP;AACA,OAAOC,qBAAP;AACA,SAASC,oBAAT;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,8BAAP;;AAEA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;EAGtC,IAAMC,aAAa,GAAG,EAAtB;EACA,IAAMC,WAAW,GAAG,EAApB;;EAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;IACxB,IACEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IACAD,QAAQ,CAACC,EAAT,KAAgB,SADhB,IAEAD,QAAQ,CAACC,EAAT,KAAgB,OAHlB,EAIE;MACA,OAAOF,IAAP;IACD;;IACD,OAAOA,IAAI,CAACG,QAAZ;EACD,CATD;;EAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,IAAR,EAAiB;IAChC,IAAID,KAAK,YAAYd,qBAArB,EAA4C;MAC1CM,aAAa,CAACU,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYT,OAAO,CAACM,KAAD,CAAnB,CAAnB;IACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACI,KAAvC,EAA8C;MACnDZ,aAAa,CAACU,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYT,OAAO,CAACM,KAAK,CAACI,KAAP,CAAnB,CAAnB;IACD,CAFM,MAEA,IAAI,OAAOJ,KAAP,KAAiB,UAArB,EAAiC;MACtC,IAAML,IAAI,GAAG,IAAIT,qBAAJ,CAA0B,CAA1B,CAAb;MACAO,WAAW,CAACS,IAAZ,CAAiBf,oBAAoB,CAACa,KAAK,CAACL,IAAD,CAAN,CAArC;MACAH,aAAa,CAACU,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYT,OAAO,CAACC,IAAD,CAAnB,CAAnB;IACD,CAJM,MAIA,IAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;MACpC,KAAK,IAAMK,GAAX,IAAkBL,KAAlB,EAAyB;QACvBD,QAAQ,CAACC,KAAK,CAACK,GAAD,CAAN,EAAaJ,IAAI,CAACE,MAAL,CAAYE,GAAZ,CAAb,CAAR;MACD;IACF;EACF,CAdD;;EAgBAjB,SAAS,CACPG,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAce,WADxB,EAEP,mFAFO,CAAT;EAMA,IAAMC,EAAE,GAAGhB,UAAU,CAAC,CAAD,CAAV,CAAce,WAAzB;;EACA,IAAI,OAAOC,EAAP,KAAc,QAAlB,EAA4B;IAC1BR,QAAQ,CAACQ,EAAD,EAAK,EAAL,CAAR;EACD,CAFD,MAEO,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;IACnC,IAAMC,YAAY,GAAG;MACnBC,GAAG,EAAE,aAAUC,MAAV,EAAkBC,IAAlB,EAAwB;QAC3B,IAAIA,IAAI,KAAK,WAAb,EAA0B;UACxB,OAAO,IAAP;QACD;;QACD,IAAI,CAACD,MAAM,CAACC,IAAD,CAAP,IAAiBA,IAAI,KAAK,OAA9B,EAAuC;UACrCD,MAAM,CAACC,IAAD,CAAN,GAAe,IAAIC,KAAJ,CAAU,EAAV,EAAcJ,YAAd,CAAf;QACD;;QACD,OAAOE,MAAM,CAACC,IAAD,CAAb;MACD,CATkB;MAUnBE,GAAG,EAAE,aAAUH,MAAV,EAAkBI,IAAlB,EAAwBd,KAAxB,EAA+B;QAClC,IAAIc,IAAI,KAAK,OAAb,EAAsB;UACpBJ,MAAM,CAACI,IAAD,CAAN,GAAed,KAAf;UACA,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD;IAhBkB,CAArB;IAmBA,IAAMe,KAAK,GACT,OAAOH,KAAP,KAAiB,UAAjB,GACI,IAAIA,KAAJ,CAAU,EAAV,EAAcJ,YAAd,CADJ,GAEInB,8BAA8B,EAHpC;IAIAI,WAAW,CAACS,IAAZ,CAAiBf,oBAAoB,CAACoB,EAAE,CAACQ,KAAD,CAAH,CAArC;IACAhB,QAAQ,CAACgB,KAAD,EAAQ,EAAR,CAAR;EACD;;EAED,OAAO;IAAEvB,aAAa,EAAbA,aAAF;IAAiBC,WAAW,EAAXA;EAAjB,CAAP;AACD;;IAEoBuB,a;;;;;EACnB,uBAAYzB,UAAZ,EAAsC;IAAA;;IAAA,IAAd0B,OAAc,uEAAJ,EAAI;;IAAA;;IACpC,0BAAuC3B,kBAAkB,CAACC,UAAD,CAAzD;IAAA,IAAQC,aAAR,uBAAQA,aAAR;IAAA,IAAuBC,WAAvB,uBAAuBA,WAAvB;;IACA,0BAAM;MAAEyB,IAAI,EAAE,OAAR;MAAiB3B,UAAU,EAAEC;IAA7B,CAAN;IAFoC,MAatC2B,UAbsC,GAazB,IAbyB;IAGpC,MAAKC,YAAL,GAAoB3B,WAApB;IAHoC;EAIrC;;;;WAED,oBAAW;MACT,+BAA6B,KAAKK,QAAlC;IACD;;;WAOD,qBAAYuB,OAAZ,EAAqBC,SAArB,EAAgC;MAC9B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,YAAL,CAAkBI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;QACjD,KAAKH,YAAL,CAAkBG,CAAlB,EAAqBE,QAArB;MACD;;MACD,KAAKA,QAAL;;MACA,IAAMC,OAAO,GAAGC,cAAc,CAACN,OAAD,CAA9B;MACArC,gBAAgB,CAAC4C,WAAjB,CAA6BF,OAA7B,EAAsCJ,SAAtC,EAAiD,KAAKxB,QAAtD;IACD;;;WAED,wBAAe;MACb,OAAO,CAAP;IACD;;;WAED,qBAAYuB,OAAZ,EAAqBC,SAArB,EAAgC;MAC9B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,YAAL,CAAkBI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;QACjD,KAAKH,YAAL,CAAkBG,CAAlB,EAAqBM,qBAArB,MACE,KAAKT,YAAL,CAAkBG,CAAlB,EAAqBO,QAArB,EADF;MAED;;MACD,IAAMJ,OAAO,GAAGC,cAAc,CAACN,OAAD,CAA9B;MACArC,gBAAgB,CAAC+C,WAAjB,CAA6BL,OAA7B,EAAsCJ,SAAtC,EAAiD,KAAKxB,QAAtD;;MACA,KAAKgC,QAAL;IACD;;;;EArCwC7C,Y;;SAAtB+B,a;AAwCrB,OAAO,SAASgB,mBAAT,CAA6BzC,UAA7B,EAAyC0C,MAAzC,EAAiD;EACtD,OAAO,IAAIjB,aAAJ,CAAkBzB,UAAlB,EAA8B0C,MAA9B,CAAP;AACD"},"metadata":{},"sourceType":"module"}