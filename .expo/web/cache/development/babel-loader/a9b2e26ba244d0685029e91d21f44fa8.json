{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { processColor } from \"./Colors\";\nimport { makeShareable, isConfigured } from \"./core\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nexport var colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport var ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nvar updatePropsByPlatform;\n\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = function updatePropsByPlatform(_, updates, maybeViewRef) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updatePropsByPlatform = function updatePropsByPlatform(viewDescriptors, updates, _) {\n    'worklet';\n\n    for (var key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n\n    viewDescriptors.value.forEach(function (viewDescriptor) {\n      _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n    });\n  };\n}\n\nexport var updateProps = updatePropsByPlatform;\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = _extends(_extends({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;","map":{"version":3,"names":["processColor","makeShareable","isConfigured","_updatePropsJS","shouldBeUseWeb","colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","value","viewDescriptor","_updateProps","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current"],"sources":["C:/Users/josho/Downloads/healthWetu/healthwetu/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"sourcesContent":["import { processColor } from './Colors';\r\nimport { makeShareable, isConfigured } from './core';\r\nimport { _updatePropsJS } from './js-reanimated';\r\nimport { shouldBeUseWeb } from './PlatformChecker';\r\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\r\nexport const colorProps = [\r\n    'backgroundColor',\r\n    'borderBottomColor',\r\n    'borderColor',\r\n    'borderLeftColor',\r\n    'borderRightColor',\r\n    'borderTopColor',\r\n    'borderStartColor',\r\n    'borderEndColor',\r\n    'color',\r\n    'shadowColor',\r\n    'textDecorationColor',\r\n    'tintColor',\r\n    'textShadowColor',\r\n    'overlayColor',\r\n];\r\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\r\nlet updatePropsByPlatform;\r\nif (shouldBeUseWeb()) {\r\n    updatePropsByPlatform = (_, updates, maybeViewRef) => {\r\n        'worklet';\r\n        if (maybeViewRef) {\r\n            maybeViewRef.items.forEach((item, _) => {\r\n                _updatePropsJS(updates, item);\r\n            });\r\n        }\r\n    };\r\n}\r\nelse {\r\n    updatePropsByPlatform = (viewDescriptors, updates, _) => {\r\n        'worklet';\r\n        for (const key in updates) {\r\n            if (ColorProperties.indexOf(key) !== -1) {\r\n                updates[key] = processColor(updates[key]);\r\n            }\r\n        }\r\n        viewDescriptors.value.forEach((viewDescriptor) => {\r\n            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\r\n        });\r\n    };\r\n}\r\nexport const updateProps = updatePropsByPlatform;\r\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\r\n    adapters.forEach((adapter) => {\r\n        adapter(updates);\r\n    });\r\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\r\n    updateProps(viewDescriptors, updates, maybeViewRef);\r\n};\r\nexport default updateProps;\r\n"],"mappings":";AAAA,SAASA,YAAT;AACA,SAASC,aAAT,EAAwBC,YAAxB;AACA,SAASC,cAAT;AACA,SAASC,cAAT;AAEA,OAAO,IAAMC,UAAU,GAAG,CACtB,iBADsB,EAEtB,mBAFsB,EAGtB,aAHsB,EAItB,iBAJsB,EAKtB,kBALsB,EAMtB,gBANsB,EAOtB,kBAPsB,EAQtB,gBARsB,EAStB,OATsB,EAUtB,aAVsB,EAWtB,qBAXsB,EAYtB,WAZsB,EAatB,iBAbsB,EActB,cAdsB,CAAnB;AAgBP,OAAO,IAAMC,eAAe,GAAG,CAACJ,YAAY,EAAb,GAAkB,EAAlB,GAAuBD,aAAa,CAACI,UAAD,CAA5D;AACP,IAAIE,qBAAJ;;AACA,IAAIH,cAAc,EAAlB,EAAsB;EAClBG,qBAAqB,GAAG,+BAACC,CAAD,EAAIC,OAAJ,EAAaC,YAAb,EAA8B;IAClD;;IACA,IAAIA,YAAJ,EAAkB;MACdA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2B,UAACC,IAAD,EAAOL,CAAP,EAAa;QACpCL,cAAc,CAACM,OAAD,EAAUI,IAAV,CAAd;MACH,CAFD;IAGH;EACJ,CAPD;AAQH,CATD,MAUK;EACDN,qBAAqB,GAAG,+BAACO,eAAD,EAAkBL,OAAlB,EAA2BD,CAA3B,EAAiC;IACrD;;IACA,KAAK,IAAMO,GAAX,IAAkBN,OAAlB,EAA2B;MACvB,IAAIH,eAAe,CAACU,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;QACrCN,OAAO,CAACM,GAAD,CAAP,GAAef,YAAY,CAACS,OAAO,CAACM,GAAD,CAAR,CAA3B;MACH;IACJ;;IACDD,eAAe,CAACG,KAAhB,CAAsBL,OAAtB,CAA8B,UAACM,cAAD,EAAoB;MAC9CC,YAAY,CAACD,cAAc,CAACE,GAAhB,EAAqBF,cAAc,CAACG,IAAf,IAAuB,SAA5C,EAAuDZ,OAAvD,CAAZ;IACH,CAFD;EAGH,CAVD;AAWH;;AACD,OAAO,IAAMa,WAAW,GAAGf,qBAApB;AACP,OAAO,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACT,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,EAAyCc,aAAzC,EAAwDC,QAAxD,EAAqE;EACvGA,QAAQ,CAACb,OAAT,CAAiB,UAACc,OAAD,EAAa;IAC1BA,OAAO,CAACjB,OAAD,CAAP;EACH,CAFD;EAGAe,aAAa,CAACG,OAAd,CAAsBV,KAAtB,GAA8B,SAAc,SAAc,EAAd,EAAkBO,aAAa,CAACG,OAAd,CAAsBV,KAAxC,CAAd,EAA8DR,OAA9D,CAA9B;EACAa,WAAW,CAACR,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,CAAX;AACH,CANM;AAOP,eAAeY,WAAf"},"metadata":{},"sourceType":"module"}