{"ast":null,"code":"import processColor from \"react-native-web/dist/exports/processColor\";\nimport { round } from \"../base\";\nimport color from \"./color\";\nimport interpolate, { Extrapolate } from \"./interpolate\";\n\nfunction red(c) {\n  return c >> 16 & 255;\n}\n\nfunction green(c) {\n  return c >> 8 & 255;\n}\n\nfunction blue(c) {\n  return c & 255;\n}\n\nfunction opacity(c) {\n  return (c >> 24 & 255) / 255;\n}\n\nexport default function interpolateColors(animationValue, options) {\n  var inputRange = options.inputRange,\n      outputColorRange = options.outputColorRange;\n  var colors = outputColorRange.map(processColor);\n  var r = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(red),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var g = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(green),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var b = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(blue),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var a = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return color(r, g, b, a);\n}","map":{"version":3,"names":["round","color","interpolate","Extrapolate","red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","processColor","r","outputRange","extrapolate","CLAMP","g","b","a"],"sources":["C:/Users/josho/Downloads/healthWetu/healthwetu/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js"],"sourcesContent":["import { processColor } from 'react-native';\r\nimport { round } from '../base';\r\nimport color from './color';\r\nimport interpolate, { Extrapolate } from './interpolate';\r\n\r\nfunction red(c) {\r\n  return (c >> 16) & 255;\r\n}\r\nfunction green(c) {\r\n  return (c >> 8) & 255;\r\n}\r\nfunction blue(c) {\r\n  return c & 255;\r\n}\r\nfunction opacity(c) {\r\n  return ((c >> 24) & 255) / 255;\r\n}\r\n\r\n/**\r\n * Use this if you want to interpolate an `Animated.Value` into color values.\r\n *\r\n * #### Why is this needed?\r\n *\r\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\r\n * of `interpolate()` function, that won't really work (at least at the moment).\r\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\r\n *\r\n * So, for now you can just use this helper instead.\r\n */\r\nexport default function interpolateColors(animationValue, options) {\r\n  const { inputRange, outputColorRange } = options;\r\n  const colors = outputColorRange.map(processColor);\r\n\r\n  const r = round(\r\n    interpolate(animationValue, {\r\n      inputRange,\r\n      outputRange: colors.map(red),\r\n      extrapolate: Extrapolate.CLAMP,\r\n    })\r\n  );\r\n  const g = round(\r\n    interpolate(animationValue, {\r\n      inputRange,\r\n      outputRange: colors.map(green),\r\n      extrapolate: Extrapolate.CLAMP,\r\n    })\r\n  );\r\n  const b = round(\r\n    interpolate(animationValue, {\r\n      inputRange,\r\n      outputRange: colors.map(blue),\r\n      extrapolate: Extrapolate.CLAMP,\r\n    })\r\n  );\r\n  const a = interpolate(animationValue, {\r\n    inputRange,\r\n    outputRange: colors.map(opacity),\r\n    extrapolate: Extrapolate.CLAMP,\r\n  });\r\n\r\n  return color(r, g, b, a);\r\n}\r\n"],"mappings":";AACA,SAASA,KAAT;AACA,OAAOC,KAAP;AACA,OAAOC,WAAP,IAAsBC,WAAtB;;AAEA,SAASC,GAAT,CAAaC,CAAb,EAAgB;EACd,OAAQA,CAAC,IAAI,EAAN,GAAY,GAAnB;AACD;;AACD,SAASC,KAAT,CAAeD,CAAf,EAAkB;EAChB,OAAQA,CAAC,IAAI,CAAN,GAAW,GAAlB;AACD;;AACD,SAASE,IAAT,CAAcF,CAAd,EAAiB;EACf,OAAOA,CAAC,GAAG,GAAX;AACD;;AACD,SAASG,OAAT,CAAiBH,CAAjB,EAAoB;EAClB,OAAO,CAAEA,CAAC,IAAI,EAAN,GAAY,GAAb,IAAoB,GAA3B;AACD;;AAaD,eAAe,SAASI,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;EACjE,IAAQC,UAAR,GAAyCD,OAAzC,CAAQC,UAAR;EAAA,IAAoBC,gBAApB,GAAyCF,OAAzC,CAAoBE,gBAApB;EACA,IAAMC,MAAM,GAAGD,gBAAgB,CAACE,GAAjB,CAAqBC,YAArB,CAAf;EAEA,IAAMC,CAAC,GAAGjB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAAU,EAAVA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAP,CAAWX,GAAX,CAFa;IAG1Be,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMC,CAAC,GAAGrB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAAU,EAAVA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAP,CAAWT,KAAX,CAFa;IAG1Ba,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAME,CAAC,GAAGtB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAAU,EAAVA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAP,CAAWR,IAAX,CAFa;IAG1BY,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMG,CAAC,GAAGrB,WAAW,CAACQ,cAAD,EAAiB;IACpCE,UAAU,EAAVA,UADoC;IAEpCM,WAAW,EAAEJ,MAAM,CAACC,GAAP,CAAWP,OAAX,CAFuB;IAGpCW,WAAW,EAAEhB,WAAW,CAACiB;EAHW,CAAjB,CAArB;EAMA,OAAOnB,KAAK,CAACgB,CAAD,EAAII,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAZ;AACD"},"metadata":{},"sourceType":"module"}