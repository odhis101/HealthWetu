{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState, I } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Font.loadAsync(Entypo.font));\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 2000);\n              }));\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 10:\n              _context.prev = 10;\n              setAppIsReady(true);\n              return _context.finish(10);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7, 10, 13]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onLayout: onLayoutRootView,\n    children: [_jsx(Text, {\n      children: \"SplashScreen Demo! \\uD83D\\uDC4B\"\n    }), _jsx(Entypo, {\n      name: \"rocket\",\n      size: 30\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","I","Entypo","SplashScreen","Font","preventAutoHideAsync","App","appIsReady","setAppIsReady","prepare","loadAsync","font","Promise","resolve","setTimeout","console","warn","onLayoutRootView","hideAsync","flex","alignItems","justifyContent"],"sources":["C:/Users/josho/Downloads/healthWetu/healthWetu/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState,I } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! ðŸ‘‹</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAiDC,CAAjD,QAA0D,OAA1D;;;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;;AAGAD,YAAY,CAACE,oBAAb;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAoCN,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOO,UAAP;EAAA,IAAmBC,aAAnB;;EAEAT,SAAS,CAAC,YAAM;IACd,SAAeU,OAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAGUL,IAAI,CAACM,SAAL,CAAeR,MAAM,CAACS,IAAtB,CAHV;;YAAA;cAAA;cAAA,iCAMU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;gBAAA,OAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;cAAA,CAAnB,CANV;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAQIE,OAAO,CAACC,IAAR;;YARJ;cAAA;cAWIR,aAAa,CAAC,IAAD,CAAb;cAXJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAeAC,OAAO;EACR,CAjBQ,EAiBN,EAjBM,CAAT;EAmBA,IAAMQ,gBAAgB,GAAGnB,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YAAA,KAC/BS,UAD+B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAO3BJ,YAAY,CAACe,SAAb,EAP2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EASjC,CAACX,UAAD,CATiC,CAApC;;EAWA,IAAI,CAACA,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OACE,MAAC,IAAD;IACE,KAAK,EAAE;MAAEY,IAAI,EAAE,CAAR;MAAWC,UAAU,EAAE,QAAvB;MAAiCC,cAAc,EAAE;IAAjD,CADT;IAEE,QAAQ,EAAEJ,gBAFZ;IAAA,WAGE,KAAC,IAAD;MAAA;IAAA,EAHF,EAIE,KAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,IAAI,EAAE;IAA5B,EAJF;EAAA,EADF;AAQD"},"metadata":{},"sourceType":"module"}